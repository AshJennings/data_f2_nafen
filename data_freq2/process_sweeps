#!/usr/bin/python3

import argparse
import numpy
import time
import re
import matplotlib.pyplot as plt
import sys
sys.path.insert(1, '../data2')
from icta import get_icta

# process one group of files - sweeps at different drive amplitudes which are
# good to fit together


parser = argparse.ArgumentParser()
parser.add_argument('listpref')

parser.add_argument('--data1dir', default='../data_freq1',
                    help='folder with source data')

parser.add_argument('--dt', default=-1, type=int,
                    help='time between points (default -1, autodetect)')

parser.add_argument('--t0', default=-1, type=int,
                    help='how long program waits before sweep (default -1, set equal to dt)')

parser.add_argument('--sm_win', default=-1, type=int,
                    help='smooth window for ICTA data, points (default -1, no smoothing)')

parser.add_argument('--skip', default="",
                    help='skip some sweeps')

args = parser.parse_args()


#####################
# read data

data = []
listfile = args.listpref + ".lst"
with open(listfile) as listf:
  for line in listf:
    pref = args.data1dir + '/' + line.rstrip()

    fname = pref + 'full.dat'

    # read sweep headers, save sweep timestamps
    times = []
    for line in open(fname, 'r'):
      if not re.search("^freq", line): continue
      v = line.rstrip().split('\t')

      if len(v)<6 or v[4] == '""' or v[5] == '""':
        print('Error: missing time for sweep %d in %s' %(len(times),fname))
        exit(1)
      t = time.strptime(v[4] + ' ' + v[5], '%d/%m/%Y %H:%M:%S')
      times.append(time.mktime(t))

    # read sweep data from *full.dat file
    try:
      F,X,Y = numpy.loadtxt(fname, delimiter='\t', usecols=(0,1,2), unpack=True, comments='freq')
    except OSError:
      print("Error: can't read file: ", fname)
      exit(1)

    # read *full2nd.dat file if it is available
    fname = pref + 'full2nd.dat'
    try:
      F2,X2,Y2 = numpy.loadtxt(fname, delimiter='\t', usecols=(0,1,2), unpack=True, comments='freq')
      if numpy.any(F2!=F):
        print("Error: different frequency values in 1st and 3rd harmonics: ", fname)
        exit(1)
    except OSError:
      X2 = numpy.zeros(X.size)
      Y2 = numpy.zeros(Y.size)

    # separate sweeps
    sweeps = [0]
    for i in range(1,F.size):
      if F[i] < F[i-1]:
        sweeps.append(i)

    if len(sweeps) != len(times):
      print("Error: different number of sweeps and sweep headers in ", fname)
      exit(1)

    # extract excitation from file name
    m = re.search("_(\d+)MV$", pref, re.IGNORECASE)
    if not m:
      print("Error: can't extract drive amplitude from filename: ", pref)
      exit(1)

    exc = float(m.group(1))
    print("%s: %d sweeps, %.0f mV" %(pref,len(sweeps),exc))

    for i in range(len(sweeps)):
      i1 = sweeps[i]
      if i<len(sweeps)-1: i2 = sweeps[i+1]
      else: i2 = len(F)

      d ={
        "exc": exc, "time": times[i],
        "F": F[i1:i2], "X": X[i1:i2], "Y": Y[i1:i2],
        "X2": X2[i1:i2], "Y2": Y2[i1:i2],
      }
      data.append(d)


# sort by time
data.sort(key=lambda x: x["time"])

# skip sweeps
N = len(data)
mask = numpy.ones(N, dtype=bool)
for r in args.skip.split(','):
  a = r.split('-')
  if len(a) == 0 or a[0] == '': continue
  if len(a) == 1:
    mask[int(a[0])]=False
  else:
    if a[1] == '': a[1] = N-1
    mask[range(int(a[0]),int(a[1])+1)] = False

if not numpy.all(mask):
  data1 = []
  for i in range(N):
    if mask[i]: data1.append(data[i])
  data=data1
  N = len(data)

if N<1:
  print("Error: empty data: " + listfile)
  exit(1)


# reconstruct time of each point
tsweep = []
for i in range(N):
  t1 = data[i]["time"]
  n  = len(data[i]["F"])
  if args.dt>0:
    if args.t0 <= 0: args.t0 = args.dt;
    t2 = t1 + args.t0 + n*args.dt
    data[i]["T"] = numpy.linspace(t1 + args.t0, t2, n)
    tsweep.append((t1+args.t0+t2)/2)
  else:
    # non-last sweep
    if i<N-1:
      t2 = data[i+1]["time"]
    # last sweep: estimate time from the previous one
    elif i>0:
      np = len(data[i-1]["F"])
      tp = data[i-1]["time"]
      t2 = t1 + (t1-tp)/(np+1)*(n+1)
    else:
      print("can't get sweep duration: " + listfile)
      exit(1)
    dt = (t2-t1)/(n+1)
    print("dt: ", dt)
    data[i]["T"] = numpy.linspace(t1+dt,t2,n)
    tsweep.append((t1+dt+t2)/2)

t0 = data[0]["time"]

# plot sweeps
cols = 'rgbcmyk'
ecols = {}
for i in range(N):
  l = ''
  if data[i]["exc"] not in ecols.keys():
    ecols[data[i]["exc"]] = cols[len(ecols)%len(cols)]
    l = "%.0f" % (data[i]["exc"])

  c = ecols[data[i]["exc"]]
  plt.plot((data[i]["T"]-t0)/3600, data[i]["F"], c + '.-',
    label=l, linewidth=1, markersize=1.5)

plt.xlabel('time, h')
plt.ylabel('Freq, Hz')
#plt.xlim([20,30])
plt.legend()
plt.savefig(args.listpref + '_sweeps.png')


# load ICTA data for the whole time range
tmin=data[0]["T"][0]
tmax=data[-1]["T"][-1]
(icta_t, icta_w, icta_st, icta_sw) = get_icta(tmin,tmax, win=args.sm_win, marg=3600)

plt.clf();

plt.plot((icta_t-tmin)/3600,  icta_w, 'r-', label = 'original data')
plt.plot((icta_st-tmin)/3600, icta_sw, 'b-', label = 'smoothed')

for i in range(N):
  data[i]["ICTA"] = numpy.interp(data[i]["T"], icta_st, icta_sw)
  data[i]["icta_mean"] = numpy.mean(data[i]["ICTA"])
  plt.plot((data[i]["T"]-tmin)/3600, data[i]["ICTA"], 'g*')

plt.xlabel('time, hours')
plt.ylabel('ICTA width, Hz')
plt.legend()
plt.savefig(args.listpref + '_icta.png')


## separate sweep sequences
# Each sequence has same frequency points, and unique set of drive amplitudes
# Distance between sweeps is less then sweep length
seq = []
drives = {}
for i in range(N):
  if  i==0 or\
      numpy.any(data[i]["F"] != data[i-1]["F"]) or\
      data[i]["T"][0] - data[i-1]["T"][-1] > data[i]["T"][-1] - data[i]["T"][0] or\
      data[i]["exc"] in drives:
    seq.append(i)
    drives = {}
  drives[data[i]["exc"]] = 1
seq.append(N)

# add sequence mean icta value
icta = []
for s in range(len(seq)-1):
  i1 = seq[s]
  i2 = seq[s+1]
  ii = []
  for i in range(i1,i2): ii.append(data[i]["icta_mean"])
  icta.append(numpy.mean(ii))

## save and plot sweep sequences
f1 = open(args.listpref + ".dat", 'w')
f1.write("# sweep sequences\n")
f1.write("# start time, end time, icta, file\n")
for s in range(len(seq)-1):
  i1 = seq[s]
  i2 = seq[s+1]
  sfile = "%s_%02d.dat" % (args.listpref, s)
  f1.write("%.0f %.0f %f %s\n" % (data[i1]["T"][0], data[i2-1]["T"][-1], icta[s], sfile))
  f2 = open(sfile, 'w')
  for i in range(i1,i2):

    f2.write("# t1: %.0f t2: %.0f icta: %f\n" % (data[i]["T"][0],data[i]["T"][-1],data[i]["icta_mean"]))
    f2.write("# time -- freq -- exc -- x -- y -- x2 -- y2 -- icta\n")
    for j in range(data[i]["T"].size):
      f2.write("%.0f %f %f  %e %e %e %e  %f\n" % (\
        data[i]["T"][j],data[i]["F"][j], data[i]["exc"],\
        data[i]["X"][j],data[i]["Y"][j],\
        data[i]["X2"][j],data[i]["Y2"][j], data[i]["ICTA"][j]\
      ))


for s in range(len(seq)-1):
  i1 = seq[s]
  i2 = seq[s+1]
  plt.clf()

  for i in range(i1,i2):
    e = data[i]["exc"]
    c = ecols[e]
    plt.plot(data[i]["F"], data[i]["X"]/e, c + '*-', label='%.0f mV'%(e))
    plt.plot(data[i]["F"], data[i]["Y"]/e, c + 'o-')

  plt.title('%s_%02d icta: %.0f Hz' %(args.listpref,s,icta[s]))
  plt.xlabel('freq, Hz')
  plt.ylabel('x/drive, y/drive')
  plt.legend()
  plt.savefig("%s_%02d.png" % (args.listpref, s))


print(seq)


