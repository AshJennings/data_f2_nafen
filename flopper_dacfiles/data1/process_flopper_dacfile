#!/usr/bin/python3

import math
import numpy
import sys
import os
import time
import argparse
import scipy.integrate

import sys
sys.path.insert(1, os.path.join(os.path.dirname(__file__), "../../find_freq"))
from find_freq import *

################################
# Program takes two arguments: data directory and
# date of the first file (in YYYY-mm-dd) format
# It processes all files and writes <time>.txt files
# with averaged values as a function of phase/2*pi, [0..1)

parser = argparse.ArgumentParser()
parser.add_argument('dirname')
parser.add_argument('date')

parser.add_argument('--split_n', default=1, type=int,
                    help='split files into n parts')

parser.add_argument('--points', default=50, type=int,
                    help='number of phase points on the output')

parser.add_argument('--harm_n', default=3, type=int,
                    help='number of harmonics to be calculated')

parser.add_argument('--round_freq', default=0, type=float,
                    help='round frequency with given accuracy')

parser.add_argument('--tfiles', action='store_true',
                    help='write averaged files, signal and drive vs time')

parser.add_argument('--skip_files', default=0, type=int,
                    help='process every (n+1)th file')

args = parser.parse_args()

dirname = args.dirname
date = time.strptime(args.date, "%Y-%m-%d")
date = time.mktime(date)

################################
# read all *.dat files in the directory

told = 0 # starting time of the previous file
fcnt = 0 # file counter
print('# time -- freq -- drive offset -- drive_amp -- sig_phase -- sig_amp1 -- sig_amp2...')
for fname in sorted(os.listdir(dirname)):
  if not fname.endswith(".dat"): continue
  fcnt += 1
  if args.skip_files>0 and fcnt%(args.skip_files+1)!=0: continue
  fname = os.path.join(dirname, fname)
  print('# ', fname)

  ################################
  # Read file, extract time, drive, and signal (columns 0,1,9)
  # as numpy arrays.
  try:
    T,D,S = numpy.loadtxt(fname, delimiter='\t', usecols=(0,1,9), unpack=True, skiprows=4)
  except ValueError:
    print("can't read file: ", fname, file=sys.stderr)
    continue

  # full time:
  if T[0] + date < told:
    date += 24*3600
  told = T[-1] + date

  for s in range(0, args.split_n):
    ################################
    # Index range

    n = T.size
    i1 = math.floor(n*s/args.split_n)
    i2 = math.floor(n*(s+1)/args.split_n)-1
    if i2 == n-1: i2+=1
    #print(i1,i2)

    T1 = T[i1:i2]
    D1 = D[i1:i2]
    S1 = S[i1:i2]
    n1 = T1.size
    tspan = T1[-1]-T1[0]
    tstep = tspan/(n1 - 1)

    ################################
    # Find drive frequency
    freq0 = find_freq_fmax(T1,D1)
    if freq0 < 0.1:
      print("non-stable drive in file: ", fname, file=sys.stderr)
      continue

    # round frequency to the nearest value if option --round_freq is set
    if args.round_freq != 0:
      freq0 = round(freq0/args.round_freq)*args.round_freq

    # calculate drive and signal harmonics
    harm = range(0,args.harm_n+1)
    DH = calc_fourier(freq0, T1,D1, harm)
    SH = calc_fourier(freq0, T1,S1, harm)

    tstamp = (T1[0]+T1[-1])/2 + date

    # print data: time, frequency
    print("%f %.10f" % (tstamp, freq0), end="")

    # print data: drive amplitude, phase shift between drive and signal (radians)
    if len(harm)>1:
      d_off = numpy.abs(DH[0])
      d_amp = numpy.abs(DH[1])
      d_ph  = numpy.angle(DH[1])
      s_ph  = numpy.angle(SH[1])
      ph = s_ph-d_ph
      while ph<0: ph += 2*math.pi
      while ph>=2*math.pi: ph -= 2*math.pi
      print("  %e %e %e" %(d_off, d_amp, ph), end="")

    # print data: signal harmonics (excluding constant)
    for h in range(1,args.harm_n+1):
      print("  %e" %(numpy.abs(SH[h])), end="")
    print()

    ################################
    # Average points with same phase
    if args.tfiles:
      phV = numpy.zeros(args.points)
      phD = numpy.zeros(args.points)
      phS = numpy.zeros(args.points)
      phN = numpy.zeros(args.points)

      for i in range(T1.size):
        ph = numpy.mod(freq0*(T1[i]-T1[0]), 1) # [0..1)
        pi = math.floor(ph*args.points) # [0..args.points)
        phV[pi] += ph
        phD[pi] += D1[i]
        phS[pi] += S1[i]
        phN[pi] += 1

      # remove bins without any values
      ii = numpy.where(phN>0)
      phN = phN[ii]
      phV = phV[ii]/phN
      phS = phS[ii]/phN
      phD = phD[ii]/phN

      if h>0:
        #shift signals by -d_ph (and skip the last point)
        d_ph  = numpy.angle(DH[1])
        phV = numpy.mod(phV + d_ph/2/math.pi, 1)
        ii = numpy.argsort(phV)
        phV = phV[ii]
        phD = phD[ii]
        phS = phS[ii]
        # add last point back
        phV = numpy.append(phV, phV[0]+1)
        phD = numpy.append(phD, phD[0])
        phS = numpy.append(phS, phS[0])

      # periodic values
      phN = numpy.append(phN, phN[0])
      phV = numpy.append(phV, phV[0]+1)
      phD = numpy.append(phD, phD[0])
      phS = numpy.append(phS, phS[0])

      # save averaged data
      numpy.savetxt('%.0f.txt' % (tstamp), numpy.transpose([phV/freq0, phD, phS]),
        header = "phase -- drive -- signal", fmt='%e %e %e')



